#!/usr/bin/env php
<?php

$autoload = __DIR__.'/vendor/autoload.php';
if(!file_exists($autoload)){
    $autoload = __DIR__.'/../../vendor/autoload.php';
}
require $autoload;


class Dispatcher implements \Illuminate\Contracts\Events\Dispatcher
{
    public function listen($events, $listener){}
    public function hasListeners($eventName){}
    public function subscribe($subscriber){}
    public function until($event, $payload = []){}
    public function dispatch($event, $payload = [], $halt = false){}
    public function push($event, $payload = []){}
    public function flush($event){}
    public function forget($event){}
    public function forgetPushed(){}
    public function fire(){}
}

$env = new \Symfony\Component\Dotenv\Dotenv();
$env->load(__DIR__.'/.domain.env');

$basePath = getenv('BASE_PATH');
$basePath = str_replace('__DIR__', __DIR__, $basePath);
$basePath = realpath($basePath);
define('BASE_PATH', $basePath);

$container   = \Illuminate\Container\Container::getInstance();
$dispatcher  = new Dispatcher();
$application = new \Illuminate\Console\Application($container, $dispatcher, '0.0.1');

$application->add(new \lanzhi\ddd\tool\MakeEntityCommand());
$application->add(new \lanzhi\ddd\tool\MakeValueCommand());
$application->add(new \lanzhi\ddd\tool\RegenerateEntityCommand());
$application->add(new \lanzhi\ddd\tool\RegenerateValueCommand());

$application->add(new \lanzhi\ddd\tool\MakeProcessCommand());
$application->add(new \lanzhi\ddd\tool\MakeServiceCommand());
$application->add(new \lanzhi\ddd\tool\MakeEventCommand());
$application->add(new \lanzhi\ddd\tool\MakeObserverCommand());
$application->add(new \lanzhi\ddd\tool\MakeRepositoryCommand());
$application->add(new \lanzhi\ddd\tool\MakeFactoryCommand());
$application->add(new \lanzhi\ddd\tool\MakeSpecificationCommand());

$application->add(new \lanzhi\ddd\tool\MakeModelCommand());
$application->add(new \lanzhi\ddd\tool\MakeDependencyCommand());

try{
    $status = $application->run();
    exit($status);
}catch (Throwable $exception){
    echo sprintf("%s: %s in %s:%s\n", get_class($exception), $exception->getMessage(), $exception->getFile(), $exception->getLine());
    echo "Stack trace:\n";
    echo $exception->getTraceAsString(),"\n";
}




