#!/usr/bin/env php
<?php

use Illuminate\Console\Application;
use Illuminate\Container\Container;
use Symfony\Component\Dotenv\Dotenv;
use ziqing\ddd\tool\MakeDependencyCommand;
use ziqing\ddd\tool\MakeEntityCommand;
use ziqing\ddd\tool\MakeModelCommand;
use ziqing\ddd\tool\MakeServiceCommand;
use ziqing\ddd\tool\MakeValueCommand;
use ziqing\ddd\tool\RegenerateEntityCommand;
use ziqing\ddd\tool\RegenerateValueCommand;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    define('BASE_PATH', __DIR__);
} else {
    define('BASE_PATH', realpath(__DIR__ . '/../../../'));
}

require BASE_PATH . '/vendor/autoload.php';

class Dispatcher implements \Illuminate\Contracts\Events\Dispatcher
{
    public function listen($events, $listener)
    {
    }

    public function hasListeners($eventName)
    {
    }

    public function subscribe($subscriber)
    {
    }

    public function until($event, $payload = [])
    {
    }

    public function dispatch($event, $payload = [], $halt = false)
    {
    }

    public function push($event, $payload = [])
    {
    }

    public function flush($event)
    {
    }

    public function forget($event)
    {
    }

    public function forgetPushed()
    {
    }
}

$container = new Container();
$dispatcher = new Dispatcher();
$application = new Application($container, $dispatcher, '0.0.1');

$application->add(new MakeEntityCommand());
$application->add(new MakeValueCommand());
$application->add(new RegenerateEntityCommand());
$application->add(new RegenerateValueCommand());

$application->add(new MakeServiceCommand());
$application->add(new MakeDependencyCommand());

$application->add(new MakeModelCommand());

try {
    $status = $application->run();
    exit($status);
} catch (Throwable $exception) {
    echo sprintf(
        "%s: %s in %s:%s\n",
        get_class($exception),
        $exception->getMessage(),
        $exception->getFile(),
        $exception->getLine()
    );
    echo "Stack trace:\n";
    echo $exception->getTraceAsString(), "\n";
}
